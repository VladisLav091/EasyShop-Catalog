openapi: 3.0.3
info:
  title: EasyShop-Catalog
  version: 1.0.0
  description: API for managing product categories and products in EasyShop
  contact:
    name: API Support
    email: support@easyshop.com
servers:
  - url: /api/v1
tags:
  - name: categories
    description: Operations related to product categories
  - name: products
    description: Operations related to products
  - name: product-category
    description: Operations related to managing relationships between products and categories

paths:
  /categories:
    get:
      tags:
        - categories
      operationId: getCategories
      summary: Получение списка категорий
      description: Получение списка всех категорий
      x-lg-handler: 'App\Http\Controllers\CategoryController@index'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        "500":
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - categories
      operationId: createCategory
      summary: Создание категории
      description: Запрос на создание категории
      x-lg-handler: 'App\Http\Controllers\CategoryController@store'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './categories/schemas/categories.yaml#/CategoryCreateRequest'
      responses:
        "201":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: './categories/schemas/categories.yaml#/Category'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/ServerError'

  /categories/{id}:
    get:
      tags:
        - categories
      operationId: getCategory
      x-lg-handler: 'App\Http\Controllers\CategoryController@show'
      x-lg-skip-request-generation: true
      summary: Получение объекта типа Category
      description: Получение объекта типа Category
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: './categories/schemas/categories.yaml#/Category'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - categories
      operationId: updateCategory
      summary: Обновление категории
      description: Запрос на обновление категории
      x-lg-handler: 'App\Http\Controllers\CategoryController@update'
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './categories/schemas/categories.yaml#/CategoryUpdateRequest'
      responses:
        "200":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: './categories/schemas/categories.yaml#/Category'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - categories
      operationId: deleteCategory
      summary: Удаление категории
      description: Запрос на удаление категории
      x-lg-handler: 'App\Http\Controllers\CategoryController@destroy'
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyDataResponse'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

  /products:
    get:
      tags:
        - products
      operationId: getProducts
      summary: Получение списка продуктов
      description: Получение списка всех продуктов
      x-lg-handler: 'App\Http\Controllers\ProductController@index'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "500":
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - products
      operationId: createProduct
      summary: Создание продукта
      description: Запрос на создание продукта
      x-lg-handler: 'App\Http\Controllers\ProductController@store'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        "201":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/ServerError'

  /products/{id}:
    get:
      tags:
        - products
      operationId: getProduct
      x-lg-handler: 'App\Http\Controllers\ProductController@show'
      x-lg-skip-request-generation: true
      summary: Получение объекта типа Product
      description: Получение объекта типа Product
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - products
      operationId: updateProduct
      summary: Обновление продукта
      description: Запрос на обновление продукта
      x-lg-handler: 'App\Http\Controllers\ProductController@update'
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        "200":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - products
      operationId: deleteProduct
      summary: Удаление продукта
      description: Запрос на удаление продукта
      x-lg-handler: 'App\Http\Controllers\ProductController@destroy'
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        "200":
          description: Выполнено успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyDataResponse'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

  /products/{productId}/categories:
    post:
      tags:
        - product-category
      operationId: addCategoryToProduct
      summary: Add a category to a product
      description: Add a category to a product
      x-lg-handler: 'App\Http\Controllers\ProductCategoryController@addCategoryToProduct'
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
              required:
                - category_id
      responses:
        "200":
          description: Category added to product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - product-category
      operationId: getProductCategories
      summary: Get categories of a product
      description: Get all categories associated with a product
      x-lg-handler: 'App\Http\Controllers\ProductCategoryController@getProductCategories'
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

  /products/{productId}/categories/{categoryId}:
    delete:
      tags:
        - product-category
      operationId: removeCategoryFromProduct
      summary: Remove a category from a product
      description: Remove a category from a product
      x-lg-handler: 'App\Http\Controllers\ProductCategoryController@removeCategoryFromProduct'
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        "200":
          description: Category removed from product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

  /categories/{categoryId}/products:
    get:
      tags:
        - product-category
      operationId: getCategoryProducts
      summary: Get products of a category
      description: Get all products associated with a category
      x-lg-handler: 'App\Http\Controllers\ProductCategoryController@getCategoryProducts'
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Category:
      $ref: './categories/schemas/categories.yaml#/Category'
    CategoryCreateRequest:
      $ref: './categories/schemas/categories.yaml#/CategoryCreateRequest'
    CategoryUpdateRequest:
      $ref: './categories/schemas/categories.yaml#/CategoryUpdateRequest'
    CategoryResponse:
      $ref: './categories/schemas/categories.yaml#/CategoryResponse'
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
          minimum: 0
          maximum: 9999999.99
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - price
    ProductCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
          minimum: 0
          maximum: 9999999.99
        stock:
          type: integer
          minimum: 0
      required:
        - name
        - price
        - stock
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
          minimum: 0
          maximum: 9999999.99
        stock:
          type: integer
          minimum: 0
      required:
        - name
        - price
        - stock
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        meta:
          type: object
      required:
        - code
        - message
    EmptyDataResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
      required:
        - data
  parameters:
    PathId:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: ID of the resource
    ProductId:
      name: productId
      in: path
      required: true
      schema:
        type: integer
      description: ID of the product
    CategoryId:
      name: categoryId
      in: path
      required: true
      schema:
        type: integer
      description: ID of the category
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
